name: release
on:
  push:
    tags:
    - "v[0-9]+.[0-9]+.[0-9]+"

env:
  # Binary name
  BIN_NAME: "dummy"

jobs:
  create-release:
    name: Create release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.release.outputs.upload_url }}
      version: ${{ env.VERSION }}
    steps:
      - name: Get the release version
        shell: bash
        run: |
          echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          echo "version is: ${{ env.VERSION }}"
      - name: Create github release
        id: release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.VERSION }}
          release_name: ${{ env.VERSION }}

  build-release:
    name: Build release
    needs: ['create-release']
    runs-on: ${{ matrix.os }}
    env:
      CARGO: cargo
      TARGET_FLAGS: ""
      TARGET_DIR: ./target
      RUST_BACKTRACE: 1
    strategy:
      matrix:
        build: [linux, linux-arm, macos, win-msvc, win-gnu, win32-msvc]
        include:
          - build: linux
            os: ubuntu-18.04
            rust: nightly
            target: x86_64-unknown-linux-musl
          - build: linux-arm
            os: ubuntu-18.04
            rust: nightly
            target: arm-unknown-linux-gnueabihf
          - build: macos
            os: macos-latest
            rust: nightly
            target: x86_64-apple-darwin
          - build: win-msvc
            os: windows-2019
            rust: nightly
            target: x86_64-pc-windows-msvc
          - build: win-gnu
            os: windows-2019
            rust: nightly-x86_64-gnu
            target: x86_64-pc-windows-gnu
          - build: win32-msvc
            os: windows-2019
            rust: nightly
            target: i686-pc-windows-msvc
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 1

      - name: Install packages (Ubuntu)
        if: matrix.os == 'ubuntu-18.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
          asciidoctor \
          zsh xz-utils liblz4-tool musl-tools

      - name: Install packages (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install asciidoctor

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          profile: minimal
          override: true
          target: ${{ matrix.target }}

      - name: Use Cross
        shell: bash
        run: |
          cargo install cross
          echo "CARGO=cross" >> $GITHUB_ENV
          echo "TARGET_FLAGS=--target ${{ matrix.target }}" >> $GITHUB_ENV
          echo "TARGET_DIR=./target/${{ matrix.target }}" >> $GITHUB_ENV

      - name: Show command used for Cargo
        run: |
          echo "cargo command is: ${{ env.CARGO }}"
          echo "target flag is: ${{ env.TARGET_FLAGS }}"
          echo "target dir is: ${{ env.TARGET_DIR }}"

      - name: Build release binary
        run: ${{ env.CARGO }} build --verbose --release ${{ env.TARGET_FLAGS }}

      - name: Strip release binary (linux and macos)
        if: matrix.build == 'linux' || matrix.build == 'macos'
        run: strip "target/${{ matrix.target }}/release/${{ env.BIN_NAME }}"

      - name: Strip release binary (arm)
        if: matrix.build == 'linux-arm'
        run: |
          docker run --rm -v \
            "$PWD/target:/target:Z" \
            rustembedded/cross:arm-unknown-linux-gnueabihf \
            arm-linux-gnueabihf-strip \
            /target/arm-unknown-linux-gnueabihf/release/${{ env.BIN_NAME }}

      - name: Build archive
        shell: bash
        run: |
          staging="${{ env.BIN_NAME }}-${{ needs.create-release.outputs.version }}-${{ matrix.target }}"
          mkdir -p "$staging"

          # Modify and uncomment the following lines to copy additional files to archive
          # cp {README.md,COPYING,LICENSE} "$staging/"
          # cp "path/to/file" "$staging/path/to/put"

          if [ "${{ matrix.os }}" = "windows-2019" ]; then
            cp "target/${{ matrix.target }}/release/${{ env.BIN_NAME }}.exe" "$staging/"
            7z a "$staging.zip" "$staging"
            echo "ASSET=$staging.zip" >> $GITHUB_ENV
          else
            cp "target/${{ matrix.target }}/release/${{ env.BIN_NAME }}" "$staging/"
            tar czf "$staging.tar.gz" "$staging"
            echo "ASSET=$staging.tar.gz" >> $GITHUB_ENV
          fi

      - name: Upload release archive
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ${{ env.ASSET }}
          asset_name: ${{ env.ASSET }}
          asset_content_type: application/octet-stream
